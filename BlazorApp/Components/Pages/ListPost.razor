@page "/posts"
@using BlazorApp.Services
@using Entities
@inject IPostService PostService
@inject NavigationManager Navigation

<PageTitle>Posts</PageTitle>

<h3>Alle Posts</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

<div class="mb-3">
    <a href="/create-post" class="btn btn-primary">Opret nyt post</a>
</div>

<div class="mb-3">
    <input type="text" class="form-control" placeholder="Søg efter posts..." @bind="searchTerm" @bind:event="oninput" />
</div>

@if (isLoading)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (posts == null || !posts.Any())
{
    <div class="alert alert-info" role="alert">
        Ingen posts fundet.
    </div>
}
else
{
    <div class="list-group">
        @foreach (var post in FilteredPosts)
        {
            <a href="/posts/@post.Id" class="list-group-item list-group-item-action">
                <div class="d-flex w-100 justify-content-between">
                    <h5 class="mb-1">@post.Title</h5>
                    <small>ID: @post.Id</small>
                </div>
                <p class="mb-1">@GetPreview(post.Body)</p>
                <small>Bruger ID: @post.UserId</small>
            </a>
        }
    </div>
}

@code {
    private IEnumerable<Post> posts = new List<Post>();
    private string errorMessage = "";
    private bool isLoading = true;
    private string searchTerm = "";

    private IEnumerable<Post> FilteredPosts
    {
        get
        {
            if (string.IsNullOrWhiteSpace(searchTerm))
                return posts;

            return posts.Where(p => 
                p.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                p.Body.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadPosts();
    }

    private async Task LoadPosts()
    {
        isLoading = true;
        errorMessage = "";

        try
        {
            posts = await PostService.GetManyAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Fejl ved indlæsning af posts: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private string GetPreview(string body)
    {
        if (string.IsNullOrEmpty(body))
            return "";

        return body.Length > 100 ? body.Substring(0, 100) + "..." : body;
    }
}